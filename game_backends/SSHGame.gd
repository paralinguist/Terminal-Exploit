extends Node2D

var role = "telnet"
var ip_address = "192.168.1.25"
var port = 23
var level = 0

var allowed_prefix = "192.0.3"
var possible_prefixes = ["192.0.3", "128.50", "169.255.15", "100.128"]
var connections = {}
var external_connections = {}

var rng : RandomNumberGenerator = RandomNumberGenerator.new()

var run = rand_range(1,12)
var usernameArray = ["Ava", "Amara", "Alexander", "Amelia", "Benjamin", "Barry", "Bob", "Charlotte", "Elijah", "Elara", "Emma", "Esme", "Evelyn", "Gavin", "Harper", "Henry", "Isabella", "James", "Jeff", "Kira", "Kevin", "Liam", "Louie", "Lucas", "Mia", "Noah", "Nyla", "Oliver", "Olivia", "Sophia", "Stuart", "William", "Zara"]
var allowedUsersMale = ["Barry", "Stuart", "Bob", "Kevin", "Gavin", "Louie", "Jeff", "Liam", "Noah", "William", "James", "Benjamin", "Oliver", "Elijah", "Lucas", "Alexander", "Henry"]
var allowedUsersFemale = ["Emma", "Olivia", "Ava", "Sophia", "Isabella", "Mia", "Charlotte", "Amelia", "Harper", "Evelyn", "Zara", "Amara", "Nyla", "Esme", "Kira", "Elara"]
var allowedUsersA = ["Ava", "Amara", "Alexander", "Amelia"]
var allowedUsersE = ["Elijah", "Elara", "Emma", "Esme", "Evelyn"]
var allowed_users = allowedUsersMale
var allowed_users_criteria = "Male Names"
var possibleAllowedUsers = ["Male Names", "Female Names", "Names that start with an 'A'", "Name starts with an 'E'"]

#4 for testing, 2 in normal operation
func _ready():
    rng.randomize()
    allowed_users_criteria = possibleAllowedUsers[randi() % possibleAllowedUsers.size()]
    if allowed_users_criteria == "Male Names":
        allowed_users = allowedUsersMale
    elif allowed_users_criteria == "Female Names":
        allowed_users = allowedUsersFemale
    elif allowed_users_criteria == "Names that start with an 'A'":
        allowed_users = allowedUsersA
    else:
        allowed_users = allowedUsersE

func list_connections():
    return "\n" + "\n".join(connections.keys())  

func add_connection(new_user, new_ip):
    var connection_user = false
    if new_user == "dummy":
        if randi() % 3 == 1:
            var random = rng.randi_range(1,12)
            if 1 <= random <= 3:
                if allowed_users != allowedUsersA:
                    connection_user = allowedUsersA[randi() % allowedUsersA.size()]
            elif 4 <= random <= 6:
                if allowed_users != allowedUsersE:
                    connection_user = allowedUsersE[randi() % allowedUsersE.size()]
            elif 7 <= random <= 9:
                if allowed_users != allowedUsersFemale:
                    connection_user = allowedUsersFemale[randi() % allowedUsersFemale.size()]
            else:
                if allowed_users != allowedUsersMale:
                    connection_user = allowedUsersMale[randi() % allowedUsersMale.size()]
        else:
            connection_user = allowed_users[randi() % allowed_users.size()]
        if !connections.has(connection_user):
            connections[connection_user] = rng.randi_range(15,25)
        return connection_user
    #use dictionary to link the user's ip and username
    else:
        external_connections[new_user] = new_ip
        var ttl = rng.randi_range(15,25)
        connections[new_user] = ttl
        return str(ttl)

func remove_connection(target_user):
    var good_move = false
    if connections.has(target_user):
        if !allowed_users.has(target_user):
            good_move = true
        connections.erase(target_user)
    return good_move

func expire_connections():
    var expired = {}
    for connection in connections:
        connections[connection] -= 1
        if connections[connection] <= 0:
            expired[connection] = remove_connection(connection)
    return expired

func expire_items():
    return expire_connections()

func get_criteria():
    return "accept all connections from " + allowed_users

func parse_command(command, player, server):
    if command == "who":
        server.send_terminal_message(player.game_terminal_id, list_connections())
    elif command.begins_with("userdel "):
        var games = server.games
        var target_user = command.right(len("userdel "))
        if games[player.game_ip_address].remove_connection(target_user):
            server.send_status(player.hacker_name, "game", "SSH: Malicious connection " + target_user + " removed - intel gained.")
            server.change_score(player.team, 1)
            games[player.game_ip_address].level_up()
            #Put this in a function ffs - need unified disconnection
            if target_user in games[player.game_ip_address].external_connections:
                var disconnect_target = server.get_player_by_game_ip(target_user)
                disconnect_target.game_connection = ""
                games[player.game_ip_address].external_connections.erase(target_user)
                server.send_terminal_message(disconnect_target.command_terminal_id, "SSH: Connection lost!")
                server.send_terminal_message(disconnect_target.command_terminal_id, "disconnect")
                server.send_terminal_message(disconnect_target.status_terminal_id, "disconnect")
                server.send_status(disconnect_target.hacker_name, "disconnect", "SSH:" + target_user)
        else:
            server.send_status(player.hacker_name, "game", "SSH: Interferred with or removed valid connection " + target_user + " - intel lost.")
            server.change_score(player.team, -1)
    else:
        server.send_terminal_message(player.game_terminal_id, "INVALID SSH COMMAND")
